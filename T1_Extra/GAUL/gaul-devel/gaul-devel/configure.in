dnl ***************************************************************
dnl gaul/configure.in
dnl ***************************************************************
dnl
dnl GAUL - Genetic Algorithm Utility Library.
dnl Copyright Â©2001-2003, Stewart Adcock <stewart@linux-domain.com>
dnl All rights reserved.
dnl
dnl The latest version of this program should be available at:
dnl http://gaul.sourceforge.net/
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.  Alternatively, if your project
dnl is incompatible with the GPL, I will probably agree to requests
dnl for permission to use the terms of any other license.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY WHATSOEVER.
dnl
dnl A full copy of the GNU General Public License should be in the file
dnl "COPYING" provided with this distribution; if not, see:
dnl http://www.gnu.org/
dnl
dnl ***************************************************************
dnl
dnl To do:	MPI/PVM/thread checks and configuration.
dnl		Consider use of AC_TRY_CFLAGS().
dnl
dnl ***************************************************************

#
# We require autoconf 2.5 or above
#
AC_PREREQ(2.5)

#
# init autoconf (and check for presence of gaul.h - the public header file)
# Specify a configuration file
#
AC_INIT(src/gaul.h)
AM_CONFIG_HEADER(config.h util/gaul/gaul_config.h)
AC_CANONICAL_SYSTEM

PACKAGE=gaul-devel

GA_MAJOR_VERSION=0
GA_MINOR_VERSION=1846
GA_PATCH_VERSION=0
GA_VERSION=${GA_MAJOR_VERSION}.${GA_MINOR_VERSION}-${GA_PATCH_VERSION}

#
# Ugly kludge.  What is the proper way to do this?
#
#ACLOCAL="$ACLOCAL -I ."
#ACLOCAL="aclocal -I ."

#
# libtool versioning
#
LT_RELEASE=${GA_MAJOR_VERSION}.${GA_MINOR_VERSION}
LT_CURRENT=0
LT_REVISION=$GA_PATCH_VERSION
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)

#
# Set some defines required to their default values.
# FIXME: should allow configuration-time modification for many of these.
#
AC_DEFINE_UNQUOTED(GA_MAJOR_VERSION, ${GA_MAJOR_VERSION}, [Major version number.])
AC_DEFINE_UNQUOTED(GA_MINOR_VERSION, ${GA_MINOR_VERSION}, [Minor version number.])
AC_DEFINE_UNQUOTED(GA_PATCH_VERSION, ${GA_PATCH_VERSION}, [Patch level.])

AC_DEFINE_UNQUOTED(GA_UNAME_STRING, "`uname -a`", [Record compilation platform information.])
AC_DEFINE_UNQUOTED(GA_BUILD_DATE_STRING, "`date +%d/%m/%y`", [Record date of compilation.])
AC_DEFINE_UNQUOTED(GA_VERSION_STRING, "${GA_VERSION}", [Version string.])

# Initialise Automake.
AM_INIT_AUTOMAKE($PACKAGE, $GA_VERSION, no-define)

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

# Initialize libtool.
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL

# Initialize maintainer mode
#AM_MAINTAINER_MODE

#
# figure debugging default, prior to $ac_help setup
#

#
#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)
#if test `expr $MINOR_VERSION \% 2` = 1 ; then
#	debug_default=yes
#else
#	debug_default=partial
#fi
#AC_DIVERT_POP()
#
dnl Debugging default.
debug_default=no

#
# declare --enable-* args and collect ac_help strings
#
AC_ARG_ENABLE(g,
       [  --enable-g=[yes/no]             compile with symbolic debug information. [default=yes]],,
       enable_g=yes)
AC_ARG_ENABLE(debug,
       [  --enable-debug=[no/minimum/yes] turn on debugging. [default=$debug_default]],,
       enable_debug=$debug_default)
AC_ARG_ENABLE(memory_debug,
       [  --enable-memory-debug           turn on memory access debugging. [default=no]],,
       enable_memory_debug=no)
AC_ARG_ENABLE(ansi,
       [  --enable-ansi                   turn on strict ansi. [default=no]],,
       enable_ansi=no)
AC_ARG_ENABLE(missing_prototypes,
       [  --enable-missing-prototypes     turn on missing prototype checks. [default=no]],,
       enable_missing_prototypes=no)
AC_ARG_ENABLE(threads,
       [  --enable-threads                turn on multi-thread support. [default=no]
                          ([=no] will override --with-threads)],,
       enable_threads=no)
AC_ARG_ENABLE(mpi,
       [  --enable-mpi                    turn on MPI support. [default=no]
                          ([=no] will override --with-mpi)],,
       enable_mpi=no)
AC_ARG_ENABLE(pvm,
       [  --enable-pvm                    turn on PVM3 support. [default=no]
                          ([=no] will override --with-pvm)],,
       enable_pvm=no)
AC_ARG_ENABLE(slang,
       [  --enable-slang=[yes/no]         use S-Lang for scripting. [default=yes]],,
       enable_slang=yes)
AC_ARG_ENABLE(prof,
       [  --enable-profile                turn on profiling. [default=no]],,
       enable_prof=no)
AC_ARG_ENABLE(efence,
       [  --enable-efence=[yes/no]        use Electric Fence for memory debugging. [default=no]],,
       enable_efence=no)
AC_ARG_ENABLE(padding,
       [  --enable-padding=[yes/no]       use memory padding for overflow detection. [default=no]],,
       enable_padding=no)
AC_ARG_ENABLE(memory_chunks,
       [  --enable-memory-chunks=[yes/no] use memory chunk allocation routines. [default=yes]],,
       enable_memory_chunks=yes)
AC_ARG_ENABLE(num_procs,
       [  --enable-num-procs=[INT]        default number of processes to spawn in MP code. [default=16]],,
       enable_num_procs=16)
AC_ARG_ENABLE(num_threads,
       [  --enable-num-threads=[INT]      default number of threads to create in threaded code. [default=4]],,
       enable_num_threads=4)
AC_ARG_ENABLE(w32_subset,
       [  --enable-w32-subset=[yes/no]    compile a subset of GAUL for windows. [default=no]],,
       enable_w32_subset=no)

AC_MSG_CHECKING(for default number of processes to spawn in MP code)
AC_DEFINE_UNQUOTED(GA_DEFAULT_NUM_PROCESSES, ${enable_num_procs}, [Default number of processes.])
AC_MSG_RESULT(${enable_num_procs})

AC_MSG_CHECKING(for default number of threads to create in threaded code)
AC_DEFINE_UNQUOTED(GA_DEFAULT_NUM_THREADS, ${enable_num_threads}, [Default number of threads.])
AC_MSG_RESULT(${enable_num_threads})

AC_MSG_CHECKING(for pthreads use)
if test "x$enable_threads" != "xyes"; then
  AC_MSG_RESULT(don't use)
  enable_threads=no
else
  AC_MSG_RESULT(use)
  AC_DEFINE( HAVE_PTHREADS, 1, [Define to use pthreads for parallel code.])
fi

#
# Setup MPI compilation
#
AC_MSG_CHECKING(for MPI use)
if test "x$enable_mpi" != "xyes"; then
  AC_MSG_RESULT(don't use)
  enable_mpi=no
  MPIFLAGS=""
  MPILIBS=""
else
  AC_MSG_RESULT(use)
  AC_DEFINE( HAVE_MPI, 1, [Define to use MPI for parallel code.])
  MPIFLAGS=""
  MPILIBS=""
fi

AC_MSG_CHECKING(for PVM3 use)
if test "x$enable_pvm" != "xyes"; then
	AC_MSG_RESULT(don't use)
  enable_pvm=no
else
  AC_MSG_RESULT(use)
  AC_DEFINE( HAVE_PVM3, 1, [Define to use PVM3 for parallel code.])
fi

AC_MSG_CHECKING(whether to disable memory chunk allocation)
if test "x$enable_memory_chunks" = "xyes"; then
  AC_MSG_RESULT(no)
  MEMORY_CHUNKS_MIMIC=0
else
  AC_MSG_RESULT(yes)
  MEMORY_CHUNKS_MIMIC=1
  AC_DEFINE( MEMORY_CHUNKS_MIMIC, 1, [Define to disable memory chunk allocation routines.])
fi

AC_MSG_CHECKING(whether to enable memory access debugging)
if test "x$enable_memory_debug" = "xyes"; then
  AC_MSG_RESULT(yes - full profiling)
  result1=1
  result2=0
  MEMORY_ALLOC_DEBUG=1
  MEMORY_ALLOC_SAFE=0
else
  AC_MSG_RESULT(no - safe wrappers only)
  result1=0
  result2=1
  MEMORY_ALLOC_DEBUG=0
  MEMORY_ALLOC_SAFE=1
fi
AC_DEFINE_UNQUOTED( MEMORY_ALLOC_DEBUG, ${result1}, [Whether to use debugging memory allocation routines.])
AC_DEFINE_UNQUOTED( MEMORY_ALLOC_SAFE, ${result2}, [Whether to use safe memory allocation routines.])

AC_MSG_CHECKING(whether to enable dumping of statistics)
if test "x$enable_stats" = "xyes"; then
  AC_MSG_RESULT(yes)
  result=1
else
  AC_MSG_RESULT(no)
  result=0
fi
AC_DEFINE_UNQUOTED(GA_WRITE_STATS, ${result}, [Whether to dump certian statistics.])

AC_MSG_CHECKING(whether to enable general GAUL debugging)
if test "x$enable_debug" = "xyes"; then
  AC_MSG_RESULT(yes)
  debug=2
else
  if test "x$enable_debug" = "xno"; then
    AC_MSG_RESULT(no)
    debug=0
  else
    AC_MSG_RESULT(partial)
    debug=1
  fi
fi
AC_DEFINE_UNQUOTED( DEBUG, ${debug}, [Overall debugging level.])
AC_DEFINE_UNQUOTED( GA_DEBUG, ${debug}, [Core GAUL debugging level.])

#
# Whether to pad memory to detect overflows
#
AC_MSG_CHECKING(whether to pad memory to detect overflows)
if test "x$enable_padding" = "xyes"; then
  AC_MSG_RESULT(yes)
  result=1
else
  AC_MSG_RESULT(no)
  result=0
fi
AC_DEFINE_UNQUOTED( MEMORY_PADDING, ${result}, [Whether to pad memory.] )

#
# Whether we need to cripple GAUL so that it works with windows.
# This is always the case if MingW is being used.
#
AC_MSG_CHECKING(whether to cripple GAUL for windows)

case $target in
  *-*-mingw*) enable_w32_subset="yes" ;;
esac

if test "x$enable_w32_subset" = "xyes"; then
  AC_MSG_RESULT(yes)
  AC_MSG_WARN([GAUL is crippled when compiled for windows.  Please consider upgrading to a proper operating system.])
  result=1
  W32_CRIPPLED=1
else
  AC_MSG_RESULT(no)
  result=0
  W32_CRIPPLED=0
fi
AC_DEFINE_UNQUOTED(W32_CRIPPLED, ${result}, [Whether to cripple GAUL so it works on windows.])

#
# Check for S-Lang.
#
AC_MSG_CHECKING(whether to link S-Lang scripting engine)
if test "x$enable_slang" = "xyes"; then
  AC_MSG_RESULT(yes)
  WILL_USE_SLANG="yes"
  HAVE_SLANG=1
  LIBS="$LIBS -lslang -lm"
  AC_CHECK_LIB(slang, SLang_init_slang,
    [LIBS="$LIBS -lslang"],
    [AC_MSG_ERROR(GAUL requires the S-Lang library for full functionality.  see http://space.mit.edu/pub/davis/slang/  Or configure with '--enable-slang=no' for reduced version.)])
  result=1
else
  AC_MSG_RESULT(no)
  WILL_USE_SLANG="no"
  result=0
  HAVE_SLANG=0
fi
AC_DEFINE_UNQUOTED(HAVE_SLANG, ${result}, [Whether S-Lang is installed.])

dnl Electric Fence has to be last library linked.
AC_MSG_CHECKING(whether to link Electric Fence for memory debugging)
if test "x$enable_efence" = "xyes"; then
  AC_MSG_RESULT(yes)
  AC_CHECK_LIB(efence, malloc, LIBS="$LIBS -lefence")
else
  AC_MSG_RESULT(no)
fi

V3_QUICK=1
AC_DEFINE_UNQUOTED(V3_QUICK, ${V3_QUICK}, [Whether to skip expensive sanity checking in vector routines.])
GA_NUM_PROCESSES_ENVVAR_STRING="GA_NUM_PROCESSES"
AC_DEFINE_UNQUOTED(GA_NUM_PROCESSES_ENVVAR_STRING, ${GA_NUM_PROCESSES_ENVVAR_STRING}, [Environment variable used to request processes.])
GA_NUM_THREADS_ENVVAR_STRING="GA_NUM_THREADS"
AC_DEFINE_UNQUOTED(GA_NUM_THREADS_ENVVAR_STRING, ${GA_NUM_THREADS_ENVVAR_STRING}, [Environment variable used to request threads.])

AC_SUBST(GA_MAJOR_VERSION)
AC_SUBST(GA_MINOR_VERSION)
AC_SUBST(GA_PATCH_VERSION)
AC_SUBST(GA_VERSION)
AC_SUBST(GA_VERSION_STRING)

AC_SUBST(MPIFLAGS)
AC_SUBST(MPILIBS)

AC_SUBST(GA_UNAME_STRING)
AC_SUBST(GA_BUILD_DATE_STRING)
AC_SUBST(V3_QUICK)
AC_SUBST(W32_CRIPPLED)
AC_SUBST(HAVE_SLANG)

AC_SUBST(GA_NUM_PROCESSES_ENVVAR_STRING)

AC_SUBST(MEMORY_ALLOC_DEBUG)
AC_SUBST(MEMORY_ALLOC_SAFE)
AC_SUBST(MEMORY_CHUNKS_MIMIC)

#
# Compiler specific switches.
#
changequote(,)dnl
case $CC in
  gcc)
    # Optimisations etc. for the GNU gcc compiler.
    case " $CFLAGS " in
      *[\ \	]-Wall[\ \	]*) ;;
      *) CFLAGS="$CFLAGS -Wall" ;;
    esac

    if test "x$enable_g" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-g[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -g" ;;
      esac

      case " $CFLAGS " in
        *[\ \	]-O2[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -O2" ;;
      esac

    else
      case " $CFLAGS " in
        *[\ \	]-O3[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -O3" ;;
      esac

    fi

    if test "x$enable_prof" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-pg[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -pg" ;;
      esac
    fi

    if test "x$enable_missing_prototypes" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-Wmissing-prototypes[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -Wmissing-prototypes" ;;
      esac
    fi

    if test "x$enable_ansi" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-ansi[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -ansi" ;;
      esac

      case " $CFLAGS " in
        *[\ \	]-pedantic[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -pedantic" ;;
      esac
    fi
    ;;

  icc)
# Optimisations etc. for the Intel C++ compiler.

    case " $CFLAGS " in
      *[\ \	]-w1[\ \	]*) ;;
      *) CFLAGS="$CFLAGS -w2" ;;
    esac

    if test "x$enable_g" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-g[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -g" ;;
      esac

      case " $CFLAGS " in
        *[\ \	]-O2[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -O2" ;;
      esac

    else

      case " $CFLAGS " in
        *[\ \	]-O3[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -O3" ;;
      esac

    fi

    case " $CFLAGS " in
      *[\ \	]-ipo[\ \	]*) ;;
      *) CFLAGS="$CFLAGS -ipo -ipo_obj" ;;
    esac

    if test "x$enable_prof" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-qp[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -qp" ;;
      esac
    fi

    if test "x$enable_ansi" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-ansi[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -ansi" ;;
      esac
    fi
    ;;

  ccc)
# Kludges etc. for the Compaq C Compiler

      if test "x$enable_g" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-g[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -g3" ;;
        esac

      else
        case " $CFLAGS " in
          *[\ \	]-O3[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -O3" ;;
        esac

      fi

      case " $CFLAGS " in
        *[\ \	]-Wall[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -Wall" ;;
      esac

      case " $CFLAGS " in
        *[\ \	]-misalign[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -misalign" ;;
      esac
    ;;

  pgcc)
# The Portland Group C compiler.
# Note: Should consider use of -tp flags to specify processor type.
# I should also consider investigating the pgcc profiling options.

      if test "x$enable_g" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-g[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -g" ;;
        esac

      else
        case " $CFLAGS " in
          *[\ \	]-fast[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -fast" ;;
        esac

      fi

      case " $CFLAGS " in
        *[\ \	]-Xa[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -Xa" ;;
      esac
    ;;
  *)
# Could be any compiler!
# Kludges etc. for the Sun C Compiler.
    if test "x$CC" = "xcc"; then
      if test "x$target" = "xsparc-sun-solaris2.8"; then

        if test "x$enable_ansi" = "xyes"; then
          case " $CFLAGS " in
            *[\ \	]-ansi[\ \	]*) ;;
            *) CFLAGS="$CFLAGS -ansi" ;;
          esac
        fi
      fi
    fi
    ;;

esac
changequote([,])dnl

#
# Checks for standard library functions.
#
AC_FUNC_VPRINTF

#
# Check type sizes.
#
AC_CHECK_SIZEOF(double, 4)
AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(void *, 4)

#
# Stuff.
#
AC_C_CONST
AC_STRUCT_TM

dnl Get includes setup correctly.
INCLUDE="$INCLUDE -I/usr/include/slang/"	# FIXME: Need to detect slang.h location.

#
# Checks for header files.
#
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(pwd.h \
                 sys/select.h sys/signal.h \
                 sys/time.h sys/types.h sys/wait.h \
                 limits.h values.h unistd.h \
		 string.h strings.h)

#
# Check for some library functions, many of which GAUL doesn't use, but I
# haven't gone though checking yet.
#
AC_CHECK_FUNCS(fdopen gethostname getpwuid select \
               atexit on_exit \
               waitpid snooze \
               memcpy memmove memscan \
               memrev memchr memmem memcmp \
               min max \
               index rindex \
	       sincos \
               snprintf \
               strchr strrchr strcat \
               strcmp strcpy strpbrk strsep \
               strcasecmp strncasecmp \
               strdup strndup \
               strnfill strcatv strsignal strrev \
               strspn strcspn \
               strerror strlcat strlcpy strstr vsnprintf)

#
# Some dodgy work-arounds.
# Most of this is a bit kludgy.  Proper fixes would be desirable...
#
case "$target" in
  *-*-mingw*) is_mingw="yes" ;;
  *-*-nto-qnx*) is_qnx="yes" ;;
  *)
    is_qnx="no"
    is_mingw="no" ;;
esac
if ( test "x$enable_mpi" = "xyes" || test "x$is_mingw" = "xyes" || test "x$is_qnx" = "xyes" ); then
  # Avoid symbol conflict with LAM-MPI and incorrect detection of itoa() with MingW/QNX Neutrino.
  AC_DEFINE(HAVE_ITOA,1,[Whether itoa() is available])
else
  AC_CHECK_FUNC(itoa)
fi

# Fix defines for case that the Sun Forte C compiler is being used on Solaris.
if test "x$CC" = "xcc"; then
# Compiler is possibly Sun's Forte C, so check platform.
  if test "x$target" = "xsparc-sun-solaris2.7"; then
    AC_DEFINE( SUN_FORTE_C, 2.7, [Define if using Sun's Forte C Compiler] )
    AC_DEFINE(HAVE_BCOPY,1,[Whether bcopy() is available])      # Big problems!!!
    AC_DEFINE(HAVE_BCMP,1,[Whether bcmp() is available])
    AC_DEFINE(HAVE_STRLEN,1,[Whether strlen() is available])
    AC_DEFINE(HAVE_STRNCMP,1,[Whether strncmp() is available])
    AC_DEFINE(HAVE_STRNCPY,1,[Whether strncpy() is available])
    AC_DEFINE(HAVE_STRTOD,1,[Whether strtod() is available])
    AC_DEFINE(HAVE_STRTOK,1,[Whether strtok() is available])
    AC_DEFINE(HAVE_MEMSET,1,[Whether memset() is available])
    AC_DEFINE(HAVE_USLEEP,1,[Whether usleep() is available])
  elif test "x$target" = "xsparc-sun-solaris2.8"; then
    AC_DEFINE( SUN_FORTE_C, 2.8, [Define if using Sun's Forte C Compiler] )
    AC_CHECK_FUNCS(bcopy bcmp strlen strncmp strncpy strtod strtok memset usleep)
  else
    AC_DEFINE( SUN_FORTE_C, 0, [Define if using Sun's Forte C Compiler] )
    AC_CHECK_FUNCS(bcopy bcmp strlen strncmp strncpy strtod strtok memset usleep)
  fi
else
# Don't recognise compiler as possibly being Sun's Forte C.
  AC_DEFINE( SUN_FORTE_C, 0, [Define if using Sun's Forte C Compiler] )
  AC_CHECK_FUNCS(bcopy bcmp strlen strncmp strncpy strtod strtok memset usleep)
fi

case "$target" in
  *-*-cygwin*)
# stricmp() and strnicmp() are defined as macros by Cygwin, therefore the
# AC_CHECK_FUNCS tests give incorrect result.
    AC_DEFINE(HAVE_STRICMP,1,[Whether stricmp() is available])
    AC_DEFINE(HAVE_STRNICMP,1,[Whether strnicmp() is available])
    ;;
  *)
    AC_CHECK_FUNCS(stricmp strnicmp)
    ;;
esac

#
# Some processor specific stuff.
#
AC_MSG_CHECKING(whether to apply processor specific optimisations)
case "$target" in
  i586-*-*)
    AC_MSG_RESULT(yes - i586)
    case "$CC" in
      icc)
        case " $CFLAGS " in
          *[\ \	]-tpp[1-9\ \	]*) ;;
	  # -axK
          *) CFLAGS="$CFLAGS -tpp6" ;;
        esac
        ;;
      gcc)
        case " $CFLAGS " in
          *[\ \	]-mcpu=*) ;;
          *) CFLAGS="$CFLAGS -mcpu=pentium" ;;
        esac
        ;;
    esac
    ;;
  i686-*-*)
    AC_MSG_RESULT(yes - i686)
    case "$CC" in
      icc)
        case " $CFLAGS " in
          *[\ \	]-tpp[1-9\ \	]*) ;;
	  # -axW
          *) CFLAGS="$CFLAGS -tpp7" ;;
        esac
        ;;
      gcc)
        case " $CFLAGS " in
          *[\ \	]-mcpu=*) ;;
          *) CFLAGS="$CFLAGS -mcpu=pentiumpro" ;;
        esac
        ;;
    esac
    ;;
  *)
    AC_MSG_RESULT(no - none defined for ${target})
    ;;
esac

dnl GAUL_MEMORY_ALIGN_SIZE
dnl Determine memory alignment characteristics.
AC_MSG_CHECKING(memory alignment)
AC_CACHE_VAL(MEMORY_ALIGN_SIZE,
[AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
int main(void)
  {
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", (unsigned int) sizeof(long)>sizeof(void *)?sizeof(long):sizeof(void *));
  exit(0);
  }
], MEM_ALIGN_SIZE=`cat conftestval`, MEM_ALIGN_SIZE=4, MEM_ALIGN_SIZE=8)])
AC_MSG_RESULT(${MEM_ALIGN_SIZE})
AC_DEFINE_UNQUOTED(MEMORY_ALIGN_SIZE, ${MEM_ALIGN_SIZE}, [Memory alignment boundry characteristics.])

dnl GAUL_GNUMAKE_WARN
dnl Produce warning message if non-GNU make is detected.
temp=`make -version -f \dev\null 2>&1 | grep GNU`
if test "x$temp" = "x"; then
  AC_MSG_WARN([You are advised to use GNU Make when compiling GAUL])
fi

dnl GAUL_DETECT_BOOL
dnl Determine native boolean stuff.
dnl 1) Check whether stdbool.h defines bool and true/false correctly.
dnl 2) Check whether compiler has built-in _Bool type.
AC_CACHE_CHECK([for working stdbool.h],
	   gaul_header_stdbool_h,
	   [AC_TRY_COMPILE([#include <stdbool.h>],
	[bool blah = false;],
	gaul_header_stdbool_h="yes", gaul_header_stdbool_h="no")])

if test "x$gaul_header_stdbool_h" = "xyes"; then
  AC_DEFINE(HAVE_STDBOOL_H, 1, [Define if you have a working <stdbool.h> header file.])
fi

AC_CACHE_CHECK([for built-in _Bool type],
	      gaul__bool,
	     [AC_TRY_COMPILE(,
	     [_Bool blah = (_Bool)0;],
	     gaul__bool="yes", gaul__bool="no")])

if test "x$gaul__bool" = "xno" && test "x$gaul_header_stdbool_h" = "xyes"; then
  AC_TRY_COMPILE([#include <stdbool.h>],
           [_Bool blah = (_Bool)0;],
           gaul__bool="yes", gaul__bool="no")
fi

if test "x$gaul__bool" = "xyes"; then
  AC_DEFINE(HAVE__BOOL, 1, [Define if compiler has built-in _Bool type.])
fi

# Where the linker must look!
CFLAGS="$CFLAGS $INCLUDE"

#
# Add code to config.status to generate a platform dependent configuration
# file for installation.
#
AC_OUTPUT_COMMANDS([
  if ( test -n "$CONFIG_FILES" && test -n "$CONFIG_HEADERS" ); then
    # If both these vars are non-empty, then config.status wasn't run by
    # automake rules (which always set one or the other to empty).
    CONFIG_OTHER=${CONFIG_OTHER-util/gaul/gaul_config.h}
  fi
  case "$CONFIG_OTHER" in
  *util/gaul/gaul_config.h*)
    outfile=util/gaul/gaul_config.h
    stampfile=util/gaul/stamp-gaul_config
    tmpfile=${outfile}.tmp
    dirname="sed s,^.*/,,g"

    echo creating $outfile
    cat > $tmpfile << _EOF_
/********************************************************************
 *
 * DO NOT EDIT THIS FILE!  It was automatically generated from:
 *    configure.in and `echo $outfile|$dirname`.in
 *    on host: `(hostname || uname -n) 2>/dev/null | sed 1q`
 *
 ********************************************************************/

#ifndef GAUL_CONFIG_H_INCLUDED
#define GAUL_CONFIG_H_INCLUDED 1

_EOF_

    cat $outfile.in >> $tmpfile    

    # Add the code to include these headers only if autoconf has
    # shown them to be present.
    if test x$ac_cv_header_pwd_h = xyes; then
      echo '#include <pwd.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_sys_select_h = xyes; then
      echo '#include <sys/select.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_sys_signal_h = xyes; then
      echo '#include <sys/signal.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_sys_time_h = xyes; then
      echo '#include <sys/time.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_sys_types_h = xyes; then
      echo '#include <sys/types.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_sys_wait_h = xyes; then
      echo '#include <sys/wait.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_limits_h = xyes; then
      echo '#include <limits.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_values_h = xyes; then
      echo '#include <values.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_unistd_h = xyes; then
      echo '#include <unistd.h>' >> $tmpfile
    fi
    if test x$ac_cv_header_string_h = xyes; then
      echo '#include <string.h>' >> $tmpfile
    elif test x$ac_cv_header_strings_h = xyes; then
      echo '#include <strings.h>' >> $tmpfile
    fi

    cat >> $tmpfile << _EOF_

#ifndef errno
/* Some sytems #define this! */
extern int errno;
#endif

_EOF_

    if test "x$gaul_header_stdbool_h" = "xyes"; then
      echo '#define HAVE_STDBOOL_H 1' >> $tmpfile
    fi
    if test "x$gaul__bool" = "xyes"; then
      echo '#define HAVE__BOOL 1' >> $tmpfile
    fi

    cat >> $tmpfile << _EOF_
/*
 * Explicitely tested functions for this platform:
 */

_EOF_

    if test "x$ac_cv_func_memcpy" = "xyes"; then
      echo '#define HAVE_MEMCPY 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_memmove" = "xyes"; then
      echo '#define HAVE_MEMMOVE 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_min" = "xyes"; then
      echo '#define HAVE_MIN 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_max" = "xyes"; then
      echo '#define HAVE_MAX 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_sincos" = "xyes"; then
      echo '#define HAVE_SINCOS 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strdup" = "xyes"; then
      echo '#define HAVE_STRDUP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strndup" = "xyes"; then
      echo '#define HAVE_STRNDUP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strcpy" = "xyes"; then
      echo '#define HAVE_STRCPY 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strncpy" = "xyes"; then
      echo '#define HAVE_STRNCPY 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strcmp" = "xyes"; then
      echo '#define HAVE_STRCMP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strncmp" = "xyes"; then
      echo '#define HAVE_STRNCMP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_stricmp" = "xyes"; then
      echo '#define HAVE_STRICMP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strnicmp" = "xyes"; then
      echo '#define HAVE_STRNICMP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strcasecmp" = "xyes"; then
      echo '#define HAVE_STRCASECMP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_strncasecmp" = "xyes"; then
      echo '#define HAVE_STRNCASECMP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_usleep" = "xyes"; then
      echo '#define HAVE_USLEEP 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_snooze" = "xyes"; then
      echo '#define HAVE_SNOOZE 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_index" = "xyes"; then
      echo '#define HAVE_INDEX 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_rindex" = "xyes"; then
      echo '#define HAVE_RINDEX 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_waitpid" = "xyes"; then
      echo '#define HAVE_WAITPID 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_readline" = "xyes"; then
      echo '#define HAVE_READLINE 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_gettimeofday" = "xyes"; then
      echo '#define HAVE_GETTIMEOFDAY 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_gethostname" = "xyes"; then
      echo '#define HAVE_GETHOSTNAME 1' >> $tmpfile
    fi
    if test "x$ac_cv_func_basename" = "xyes"; then
      echo '#define HAVE_BASENAME 1' >> $tmpfile
    fi

    if test "x$MEMORY_CHUNKS_MIMIC" = "x1"; then
      echo '#define MEMORY_CHUNKS_MIMIC 1' >> $tmpfile
    fi

    cat >> $tmpfile << _EOF_

/*
 * These functions were not explicitely tested.
 * The probably will be tested in futre versions, but
 * for now they are not needed.
 */
#define HAVE_FDOPEN 1
#define HAVE_GETPWUID 1
#define HAVE_SELECT 1
#define HAVE_ATEXIT 1
#define HAVE_ON_EXIT 1
#define HAVE_MEMSCAN 1
#define HAVE_MEMREV 1
#define HAVE_MEMCHR 1
#define HAVE_MEMMEM 1
#define HAVE_MEMCMP 1
#define HAVE_SETLOCALE 1
#define HAVE_STRCHR 1
#define HAVE_STRRCHR 1
#define HAVE_STRCAT 1
#define HAVE_STRCATV 1
#define HAVE_STRREV 1
#define HAVE_STRSPN 1
#define HAVE_STRCSPN 1
#define HAVE_STRERROR 1
#define HAVE_STRLCAT 1
#define HAVE_STRLCPY 1
#define HAVE_STRSTR 1
#define HAVE_STRPBRK 1
#define HAVE_STRSEP 1
#define HAVE_STRNFILL 1
#define HAVE_STRSIGNAL 1
#define HAVE_VSNPRINTF 1
#define HAVE_SNPRINTF 1
#define HAVE_ITOA 1
#define HAVE_BCOPY 1
#define HAVE_BCMP 1
#define HAVE_STRLEN 1
#define HAVE_STRNCPY 1
#define HAVE_STRTOD 1
#define HAVE_STRTOK 1
#define HAVE_MEMSET 1

#define GA_MAJOR_VERSION ${GA_MAJOR_VERSION}
#define GA_MINOR_VERSION ${GA_MINOR_VERSION}
#define GA_PATCH_VERSION ${GA_PATCH_VERSION}
#define GA_VERSION_STRING "${GA_MAJOR_VERSION}.${GA_MINOR_VERSION}-${GA_PATCH_VERSION}"
#define GA_UNAME_STRING "`uname -a`"
#define GA_BUILD_DATE_STRING "`date +%d/%m/%y`"

#define V3_QUICK ${V3_QUICK}
#define W32_CRIPPLED ${W32_CRIPPLED}
#define HAVE_SLANG ${HAVE_SLANG}
#define AVLTREE_KEY_TYPE void *
#define GA_NUM_PROCESSES_ENVVAR_STRING "${GA_NUM_PROCESSES_ENVVAR_STRING}"
#define GA_NUM_THREADS_ENVVAR_STRING "${GA_NUM_THREADS_ENVVAR_STRING}"

#define MEMORY_ALLOC_SAFE ${MEMORY_ALLOC_SAFE}
#define MEMORY_ALLOC_DEBUG ${MEMORY_ALLOC_DEBUG}

#endif /* GAUL_CONFIG_H_INCLUDED */

_EOF_

    if cmp -s $tmpfile $outfile; then
      echo $outfile is unchanged
      rm -f $tmpfile
    else
      mv $tmpfile $outfile
      touch $stampfile
    fi
    ;;
  esac
],[
ac_cv_header_pwd_h=$ac_cv_header_pwd_h
ac_cv_header_sys_select_h=$ac_cv_header_sys_select_h
ac_cv_header_sys_signal_h=$ac_cv_header_sys_signal_h
ac_cv_header_sys_time_h=$ac_cv_header_sys_time_h
ac_cv_header_sys_types_h=$ac_cv_header_sys_types_h
ac_cv_header_sys_wait_h=$ac_cv_header_sys_wait_h
ac_cv_header_limits_h=$ac_cv_header_limits_h
ac_cv_header_values_h=$ac_cv_header_values_h
ac_cv_header_unistd_h=$ac_cv_header_unistd_h
ac_cv_header_string_h=$ac_cv_header_string_h
ac_cv_header_strings_h=$ac_cv_header_strings_h

ac_cv_func_memcpy=$ac_cv_func_memcpy
ac_cv_func_memmove=$ac_cv_func_memmove
ac_cv_func_min=$ac_cv_func_min
ac_cv_func_max=$ac_cv_func_max
ac_cv_func_sincos=$ac_cv_func_sincos
ac_cv_func_strdup=$ac_cv_func_strdup
ac_cv_func_strndup=$ac_cv_func_strndup
ac_cv_func_strcpy=$ac_cv_func_strcpy
ac_cv_func_strncpy=$ac_cv_func_strncpy
ac_cv_func_strcmp=$ac_cv_func_strcmp
ac_cv_func_strncmp=$ac_cv_func_strncmp
ac_cv_func_stricmp=$ac_cv_func_stricmp
ac_cv_func_strnicmp=$ac_cv_func_strnicmp
ac_cv_func_strcasecmp=$ac_cv_func_strcasecmp
ac_cv_func_strncasecmp=$ac_cv_func_strncasecmp
ac_cv_func_usleep=$ac_cv_func_usleep
ac_cv_func_snooze=$ac_cv_func_snooze
ac_cv_func_index=$ac_cv_func_index
ac_cv_func_rindex=$ac_cv_func_rindex
ac_cv_func_waitpid=$ac_cv_func_waitpid
ac_cv_func_readline=$ac_cv_func_readline
ac_cv_func_gettimeofday=$ac_cv_func_gettimeofday
ac_cv_func_gethostname=$ac_cv_func_gethostname
ac_cv_func_basename=$ac_cv_func_basename

gaul_header_stdbool_h=$gaul_header_stdbool_h
gaul__bool=$gaul__bool

GA_MAJOR_VERSION=$GA_MAJOR_VERSION
GA_MINOR_VERSION=$GA_MINOR_VERSION
GA_PATCH_VERSION=$GA_PATCH_VERSION
GA_VERSION_STRING=$GA_VERSION_STRING

V3_QUICK=$V3_QUICK
W32_CRIPPLED=$W32_CRIPPLED
HAVE_SLANG=$HAVE_SLANG
GA_NUM_PROCESSES_ENVVAR_STRING=$GA_NUM_PROCESSES_ENVVAR_STRING
GA_NUM_THREADS_ENVVAR_STRING=$GA_NUM_THREADS_ENVVAR_STRING

MEMORY_ALLOC_SAFE=$MEMORY_ALLOC_SAFE
MEMORY_ALLOC_DEBUG=$MEMORY_ALLOC_DEBUG
MEMORY_CHUNKS_MIMIC=$MEMORY_CHUNKS_MIMIC
])

#AC_OUTPUT([Makefile util/Makefile src/Makefile tests/Makefile examples/Makefile extra/Makefile extra/pp/Makefile],
AC_OUTPUT([Makefile util/Makefile src/Makefile tests/Makefile examples/Makefile debian/Makefile],
	[test -z "$CONFIG_HEADERS" || echo timestamp > stamp-h.in]
	)

echo \
"************************************************************************
  GAUL has been configured successfully.  In summary:

  Version:                    ${GA_VERSION}
  Source code location:       ${srcdir}
  Host system type:           ${host}
  Target system type:         ${target}
  Debugging level:            ${debug}
  C compiler:                 ${CC}
  C compiler flags:           ${CFLAGS}
  Additional include flags:   ${INCLUDE}
  Install path:               ${prefix}
  Use S-Lang:                 ${WILL_USE_SLANG}

************************************************************************"

